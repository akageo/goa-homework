1. Write an algorithm in pseudocode to count the number of capital letters in
a file of text. How many comparisons does it do? What is the fewest number of increments 
it might do? What is the largest number? (Use N for the
number of characters in the file when writing your answer.)


Soultion 1.

function capital_counter(file):
	declare variable capital_count = 0
	for each character in file:
		if character/element iscapital:   -- + 1 Comparsion
			add 1 to capital_count       + 1 Increment
    return count

Conculsion:

Algorithm does 1 Comparsion for every character N comparisons in total
Fewest number of increments Algorithm might do is 0 this is best case when N is 0 or capital characters in file are 0
Largest number of increments Algorithm can do is N as N is all of the characters this is worst case when they're all capital


2. There is a set of numbers stored in a file, but we donâ€™t know how many it
contains. Write an algorithm in pseudocode to calculate the average of the
numbers stored in this file. What type of operations does your algorithm
do? How many of each of these operations does your algorithm do?

Soultion 2.

function average(set):
declare variable sum = 0 -- + 1 Declaring variable
declare varaible count = 0 -- + 1 Declaring variable


for num in set:
    add num to sum, sum += num -- + 1 Increment
    add 1 to count, count += 1 -- + 1 Increment
return sum/count -- Math Operation

Conclusion:

Algorithm uses 2 variable declaration operations 
Algorithm uses 2 math operations (increments) for every number in set and 1 division operation in total 2N + 1



3. Write an algorithm, without using compound conditional expressions, that
takes in three integers and determines if they are all distinct. On average,
how many comparisons does your algorithm do? Remember to examine all
input classes.


Soultion 3.

function distinct(num1,num2,num3):
    if num1 == num2: -- + 1 Comparsion
        return false 
    if num1 == num3: -- + 1 Comparsion
        return false
    if num2 == num3: -- + 1 Comparsion
        return false
    return true

Conclusion:

On average algorithm does 2 comparsions (1 + 2 + 3) / 3



4. Write an algorithm that takes in three distinct integers and determines the
largest of the three. What are the possible input classes that would have to
be considered when analyzing this algorithm? Which one causes your algorithm 
to do the most comparisons? Which one causes the least? (If there is
no difference between the most and least, rewrite the algorithm with simple
conditionals and without using temporary variables so that the best case gets
done faster than the worst case.)


Soultion 4.

function max(num1,num2,num3)
    if num1 > num2:
        if num1 > num3:
            return num1
    if num2 > num3:
        return num2
    return num3

Conclusion:
Possible input classes for Algorithm are 3:num1 is max,num2 is max,num3 is max
input class when num3 is max causes Algorithm to do most comparisons (worst case)
input class when num1 is max causes algorithm to do least comparisons (best case)



5. Write an algorithm to find the second largest element in a list of N values.
How many comparisons does your algorithm do in the worst case? (Later,
we will see an algorithm that will do this with about N comparisons.)


Soultion 5.

function second_largest(list):
    max1 = 0
    max2 = 0
    for num in list:
        if num > max1:
            max2 = max1
            max1 = num
        if num > max2 and num != max1:
            max2 = num
    return max2

Conclusion:
Algorithm does N comparisons in worst case